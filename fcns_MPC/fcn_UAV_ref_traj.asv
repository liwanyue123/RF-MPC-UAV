function [p, Xd, Ud] = fcn_UAV_ref_traj(t_, Xt, p)

addpath(genpath("Utils"));

% [pc, v, R, wb] = deal(Xt(1:3), Xt(4:6), Xt(7:15), Xt(16:18));
num_points=length(t_);

%% orientation
% Define initial, intermediate, and final rotation matrices
initial_R = eye(3);
middle_T = calRotMatrix('Y', deg2rad(-180))*calRotMatrix('Z', deg2rad(45));
middle_R = middle_T(1:3, 1:3);
final_T = calRotMatrix('Y', deg2rad(-360))*calRotMatrix('Z', deg2rad(45)) ;
final_R = final_T(1:3, 1:3);

% interpolation
t_normalized = (t_/p.SimTimeDuration) * 2;  
R_slerp1 = slerp(initial_R, middle_R, t_normalized); 
R_slerp2 = slerp(middle_R, final_R, t_normalized - 1); 
R_traj = zeros(3, 3, num_points);


for i = 1:num_points
    if t_normalized(i) <= 1
        R_traj(:, :, i) = R_slerp1{i};
    else
        R_traj(:, :, i) = R_slerp2{i};
    end
end

%% position
%  Create the 1/2 circle trajectory
% Parameters
radius = 3;
theta_start = 0;
theta_end =  pi;

% Generate the points
t_normalized = t_/p.SimTimeDuration;
theta = theta_start + t_normalized * (theta_end - theta_start);
 
x = (radius * cos(theta)-radius);
z = 2*radius * sin(theta)+p.z0;
y = zeros(size(theta));
pos_traj = [x; y; z];

% Calculate expected velocity and angular velocity
dt = p.simTimeStep; % Time step
vel_traj = diff(pos_traj, 1, 2) / dt; % Velocity in world coordinates
ang_traj = zeros(3, num_points-1); % Angular velocity in body coordinates

for i = 1:num_points-1
    dR = R_traj(:, :, i)' * R_traj(:, :, i+1);
    ang_traj(:, i) = R_traj(:, :, i) * unHat(logm(dR)' / dt); % Calculate angular velocity in body frame
end
% desired state Xd
Xd = [pos_traj(1:3,:) ;
    [vel_traj,vel_traj(:,end)];
    reshape(R_traj, [9, num_points]);
    [ang_traj,ang_traj(:,end)]  ];

Ud=repmat( (p.mass * p.g / 4) * ones(4, 1) ,1, num_points);

end

function R_interp = slerp(R_initial, R_final, t_normalized)
% R_initial: (3x3)
% R_final: (3x3)
% t_normalized: range [0, 1]

num_timesteps = length(t_normalized);
R_interp = cell(1, num_timesteps);

for i = 1:num_timesteps
    R_interp{i} = R_initial * expm(t_normalized(i) * log_SO3(R_initial' * R_final));
end

end


function X = log_SO3(R)
% R: Rotation matrix (3x3)
theta = acos((trace(R) - 1) / 2); % Calculate rotation angle

if abs(theta) < 1e-12 % When the rotation angle is 0
X = zeros(3);
else
X = theta / (2 * sin(theta)) * (R - R'); % Calculate Lie algebra
end

end

